# -*- coding: utf-8 -*-
"""python_to_data_science.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_-NUcWF9g1Z-JMICohdXOHUjBbdFXLy

# üìñ Contextualizando

O conjunto de dados utilizado fornece avalia√ß√µes de pacientes sobre medicamentos
espec√≠ficos, juntamente com condi√ß√µes relacionadas e uma classifica√ß√£o de 0 a 10 estrelas para
indicar a satisfa√ß√£o geral do paciente. Os dados foram obtidos rastreando sites de revis√£o
farmac√™utica online. a inten√ß√£o era estudar a an√°lise de sentimento da experi√™ncia com o
medicamento em m√∫ltiplas facetas, ou seja, sentimentos aprendidos sobre aspectos espec√≠ficos,
como efic√°cia e efeitos colaterais, a transferibilidade de modelos entre dom√≠nios, ou seja, condi√ß√µes,
e a possibilidade de transfer√™ncia de modelos entre diferentes fontes de dados.

A base de dados utilizada foi retirada do reposit√≥rio da UCI Machine Learning Repository[1]
do Conjunto de Dados Drug Review Dataset[2] (Drugs.com)[3]. Os dados foram divididos em um
trem (75%), uma parti√ß√£o de teste (25%) e armazenados em dois arquivos .tsv (valores separados
por tabula√ß√£o), respectivamente. As colunas foram separadas em Nome do medicamento
(categ√≥rico): nome do medicamento, condi√ß√£o (categ√≥rica): nome da condi√ß√£o, revis√£o (texto):
revis√£o do paciente, classifica√ß√£o (num√©rica): classifica√ß√£o do paciente de 0 a10 estrelas, data
(data): data da entrada da revis√£o, conta √∫til (num√©rica): n√∫mero de usu√°rios que acharam a
avalia√ß√£o √∫til

O objetivo da an√°lise √© poder levantar a efic√°cia dos medicamentos dentro de cada grupo de
condi√ß√£o al√©m de relacionar o aumento ou diminui√ß√£o do consumo de determinado tipo de
medicamento no decorrer do tempo.

# ‚öì Descrevendo o dataset:
1. drugName (categorical): Nome da Droga
2. condition (categorical): Nome da Condi√ß√£o ou Doen√ßa
3. review (text): Avalia√ß√£o do Usu√°rio
4. rating (numerical): Nota do Usu√°rio
5. date (date): Data da Avalia√ß√£o
6. usefulCount (numerical): N√∫mero de pessoas que acharam essa avalia√ß√£o √∫til

# üìö Importando as bibliotecas
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
# %matplotlib inline
# %pylab inline
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('ggplot')

"""# üåÄ Carregando o dataset """

dataset = pd.read_csv('drugsComTrain_raw.tsv', sep='\t', header=0)

"""# üêæ Mostrando os cinco primeiro elementos do dataset """

del dataset['review']
del dataset['Unnamed: 0']

dataset.head()

"""# üìë Organizando o dataset:"""

dataset.dtypes

rows_of_dataset = dataset.shape[0]
columns_of_dataset = dataset.shape[1]
print(f'O dataset possui {rows_of_dataset} linhas e {columns_of_dataset} colunas.')

null_values_count = dataset.isna().sum().sum()
print(f'O dataset possui {null_values_count} valores nulos.')

"""**Removendo os valores Nulos:**"""

clean_dataset = dataset.dropna()
rows_of_dataset = clean_dataset.shape[0]
columns_of_dataset = clean_dataset.shape[1]
print(f'O dataset agora possui {rows_of_dataset} linhas e {columns_of_dataset} colunas.')

"""**Removendo as condi√ß√µes inv√°lidas:**"""

drug_conditions = clean_dataset['condition'].unique().tolist()
drug_conditions = drug_conditions

conditions_group = clean_dataset.groupby('condition').count()
conditions_group.head(75)

"""**Se cont√©m "<span/\>" √© uma condi√ß√£o inv√°lida e provocar√° ru√≠dos na an√°lise.**"""

clean_dataset.reset_index(inplace=True)
condition_list = clean_dataset['condition'].values.tolist()
filter = []

for i in range(len(condition_list)):
  if('</span>' in condition_list[i]):
    filter.append(i)
clean_dataset.drop(filter, inplace=True)
polited_data = clean_dataset.copy()
print(f'O dataframe sem lixo tem {polited_data.shape[0]} linhas.')

conditions_group  = polited_data.groupby('condition').count()
conditions_group.head(60)

polited_data.head()

polited_data.dtypes

"""# üìë Separando o dataset em condi√ß√µes:"""

polited_data[u'condition'].value_counts()

df_filtered =polited_data[polited_data['condition'].isin(['Birth Control', 'Depression', 'Pain', 'Anxiety' ])]
df_filtered[u'condition'].value_counts()

df_birthcontrol = df_filtered[df_filtered['condition']=='Birth Control']
df_depression = df_filtered[df_filtered['condition']=='Depression']
df_pain = df_filtered[df_filtered['condition']=='Pain']
df_anxiety = df_filtered[df_filtered['condition']=='Anxiety']

"""# ‚öï Analisando a efici√™ncia dos medicamentos para Controle de Natalidade:

üìë **Definindo os medicamentos mais eficientes:**
"""

efficient_birth_control = df_birthcontrol[df_birthcontrol['rating'].isin([10.0, 9.0 ])]

efficient_birth_control['drugName'].value_counts()

efficient_birth_control = efficient_birth_control[efficient_birth_control['drugName'].isin(['Etonogestrel', 'Levonorgestrel', 'Ethinyl estradiol / norethindrone', 'Nexplanon' ])]
efficient_birth_control['drugName'].value_counts()

efficient_birth_control.groupby('rating')[u'drugName'].value_counts()

df2 = efficient_birth_control[efficient_birth_control['rating']==10.0]
df2.groupby(u'drugName')['rating'].value_counts().plot.barh()

"""# ‚öï Analisando a efici√™ncia dos medicamentos para Depress√£o:

üìë **Definindo os medicamentos mais eficientes:**
"""

efficient_depression = df_depression[df_depression['rating'].isin([10.0, 9.0 ])]

efficient_depression['drugName'].value_counts()

efficient_depression = efficient_depression[efficient_depression['drugName'].isin(['Bupropion', 'Sertraline', 'Desvenlafaxine', 'Pristiq' ])]
efficient_depression['drugName'].value_counts()

efficient_depression.groupby('rating')[u'drugName'].value_counts()

df2 = efficient_depression[efficient_depression['rating']==10.0]
df2.groupby(u'drugName')['rating'].value_counts().plot.barh()

"""#‚öï Analisando a efici√™ncia dos medicamentos para Dor:

üìë **Definindo os medicamentos mais eficientes:**
"""

efficient_pain = df_pain[df_pain['rating'].isin([10.0, 9.0 ])]

efficient_pain['drugName'].value_counts()

efficient_pain = efficient_pain[efficient_pain['drugName'].isin(['Oxycodone', 'Acetaminophen / hydrocodone', 'Acetaminophen / oxycodone', 'Tramadol' ])]
efficient_pain['drugName'].value_counts()

efficient_pain.groupby('rating')[u'drugName'].value_counts()

df2 = efficient_pain[efficient_pain['rating']==10.0]
df2.groupby(u'drugName')['rating'].value_counts().plot.barh()

"""# ‚öï Analisando a efici√™ncia dos medicamentos para Ansiedade:

üìë **Definindo os medicamentos mais eficientes:**
"""

efficient_anxiety = df_anxiety[df_anxiety['rating'].isin([10.0, 9.0 ])]

efficient_anxiety['drugName'].value_counts()

efficient_anxiety = efficient_anxiety[efficient_anxiety['drugName'].isin(['Alprazolam', 'Escitalopram', 'Clonazepam', 'Lexapro' ])]
efficient_anxiety['drugName'].value_counts()

efficient_anxiety.groupby('rating')[u'drugName'].value_counts()

df2 = efficient_anxiety[efficient_anxiety['rating']==10.0]
df2.groupby(u'drugName')['rating'].value_counts().plot.barh()

"""# üìÖ Analisando o consumo de medicamentos no decorrer do tempo:"""

df = polited_data['date'].value_counts().reset_index()
df['index'] = df['index'].astype('datetime64')
df['date'] = df['date'].astype('int')

#crio uma coluna year
df['year'] = df['index'].map(lambda x: x.year )

#junto pelo year igual somando a date
df = df.groupby(['year']).sum().reset_index()
df

year_consume = plt.bar(df['year'], df['date'])

"""# Credibilidade das Avalia√ß√µes"""

graf= sns.catplot(x='rating', y='usefulCount', data=polited_data)
graf = graf

graf2= sns.relplot(x='condition', y='usefulCount', hue='rating', col='rating', data=polited_data)
graf2 = graf2

"""# S√©ries Temporais

As aavalia√ß√µes est√£o conectadas ao n√∫mero de usu√°rios consumidores de rem√©dios atrav√©s do n√∫mero de pessoas que acharam a avalia√ß√£o √∫til, por isso foi levado em considera√ß√£o esse elemento para analisar o consumo no decorrer do tempo, atrelando as notas, pois uma nota boa est√° mais pr√≥ximo de provocar o consumo recorrente do medicamento e at√© a indica√ß√£o para terceiros.
"""

polited_data['date'] = pd.to_datetime(polited_data['date'])
polited_data.dtypes

polited_data['increase'] = polited_data['usefulCount'].diff()
polited_data['acceleration'] = polited_data['increase'].diff()
polited_data

def plot_comp(title, labelx, labely, x, y, dataset):
  sns.set_palette('Accent')
  sns.set_style('darkgrid')
  ax = sns.lineplot(x=x, y=y, data=dataset)
  ax.figure.set_size_inches(12,6)
  ax.set_title(title, fontsize= 18)
  ax.set_xlabel(labelx, fontsize= 14)
  ax.set_ylabel(labely, fontsize= 14)
  ax = ax

plot_comp('Consumo de rem√©dios no decorrer do tempo', 'Tempo', 'Consumo', 'date', 'usefulCount', polited_data)

"""**√â poss√≠vel observar uma queda no consumo de rem√©dios no decorrer do tempo.**

# Analisando a Ansiedade no ambito geral
"""

new_anxiety = polited_data[polited_data['condition']== 'Anxiety' ]
new_anxiety

plot_comp('Consumo de rem√©dios para ansiedade no decorrer do tempo', 'Tempo', 'Consumo', 'date', 'usefulCount', new_anxiety)

sns.lmplot(x='rating', y='usefulCount', data=new_anxiety)

"""# Analisando a Depress√£o no ambito geral"""

new_depression = polited_data[polited_data['condition']== 'Depression' ]
new_depression

plot_comp('Consumo de rem√©dios para depress√£o no decorrer do tempo', 'Tempo', 'Consumo', 'date', 'usefulCount', new_depression)

sns.lmplot(x='rating', y='usefulCount', data=new_depression)

"""Apesar de no cen√°rio geral Ansiedade e Depress√£o serem t√≥picos recorrentes, amboas apresentaramm uma queda no decorrer do tempo, por√©m, vale ressaltar que o ano de 2020 n√£o entrou nos campos dos dados, o que muito provavelmente poderia mudar essa an√°lise.

Analisando o cen√°rio geral, foi poss√≠vel notar uma queda significativa no decorrer do tempo.

# Trabalhos Futuros

Ampliar a amostra de dados englobando os anos 2019,2020 e 2021, para poder demonstrar o impacto da pandemia na quantidade de consumo de rem√©dios, alertando para o poder da m√≠dia que em muitos lugares do mundo criaram o Kit Covid e para os efeitos da solid√£o provocados pela quarentena.
"""